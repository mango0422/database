24. xml의 한계
   - 내장 데이터 유형 지원이 없다.
   - XML 구문이 중복된다.
   - 사용자가 자신의 태그를 생성하는 것을 허용하지 않는다.
   - 텍스트 기반 데이터 전송 형식과 유사하다.
25. json의 특징과 장단점
   - JavaScript Object Notation의 약자이다.
   - 이름 그대로 자바스크립트에서 문법을 따왔다.
   - xml보다 쉽게 데이터를 교환하고 저장하기 위해 만들어진 텍스트 기반의 데이터 교환 표준으로,
     텍스트 기반이므로 어떠한 프로그래밍 언어에서도 JSON 데이터를 읽고 사용할 수 있다.
   - 용량이 작고, 문자열을 받은 후 문자열을 바로 파싱하므로 XML보다 빠른 처리 속도를 가진다.
   - 현재 REST API에서 JSON이 XML보다 많이 채택되고 있다.

   - 예시 : XML의 예시를 JSON으로 변환했을때 보이는 코드.
   - XML과 JSON은 띄어쓰기나 줄넘김 없이 한줄로 표현할 수 있기에, 글자수가 적은 JSON이 상대적으로 가볍다.

   - 단점 : XML과 달리, 전송받은 데이터의 무결성을 직접 검증해야 한다.
   - 네임 스페이스 지원이 없어 확장성이 부족하며,
   - 형식적인 문법 정의만을 지원하여 문법을 지켜야 한다.

26. yaml의 특징과 장단점 (야믈 이라고 읽는다.)
   - Yet Another Markup Language, 혹은 Yet Ain't Markup Language의 약자이다.
   - JSON의 단점을 보완하고자 만든 superset이다.
   - 파이썬처럼 줄바꿈과 태그가 필수 요소이다.
   - 문법에 알맞지 않으면 정보가 파괴된다.

   - 사람의 편의를 우선시하는 YAML이기 때문에, 도커 컴포즈나 스프링 등의 설정파일에 많이 사용된다.

   - json과 yaml을 비교할 때, yaml은 json과는 다르게 타입을 명시해줄 수 있어 불필요한 실수를 피할 수 있다.
   - 
	
27. xml, json, yaml의 차이점
   - 가장 큰 차이점은 XML만 스키마를 가지고 있어 자체적으로 데이터의 무결성 검증, 즉 유효한 문서인지 검증이 가능하다는 점이다.
    => 데이터의 검증이 필요한 곳에서는 스키마를 사용하여 데이터의 무결성을 검증할 수 있는 XML이 아직도 사용된다.